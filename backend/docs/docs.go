// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-06-20 18:36:19.848879416 +0800 +08 m=+0.038221747

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Developers",
            "email": "geraldpng@gmail.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "Search employee data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Search employee data",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum salary",
                        "name": "minSalary",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum salary",
                        "name": "maxSalary",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Number of results",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "+name",
                            "-name",
                            "+login",
                            "-login",
                            "+id",
                            "-id",
                            "+salary",
                            "-salary"
                        ],
                        "type": "string",
                        "description": "Sort by parameter, etc +name, -login",
                        "name": "sort",
                        "in": "query",
                        "required": true
                    }
                ]
            }
        },
        "/users/upload": {
            "post": {
                "description": "Uploads csv, and bulk upserts employee data in db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Bulk upserts employee data",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Employee CSV",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ]
            }
        },
        "/users/{employeeID}": {
            "delete": {
                "description": "Delete employee from db by employee id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Delete employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "employeeID",
                        "in": "path",
                        "required": true
                    }
                ]
            },
            "patch": {
                "description": "Update employee from db by employee id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Update employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "employeeID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Employee details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeUpdate"
                        }
                    }
                ]
            }
        }
    },
    "definitions": {
        "models.EmployeeUpdate": {
            "type": "object",
            "required": [
                "login",
                "name",
                "salary"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "salary": {
                    "type": "number"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "localhost:4000",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "TechHunt 2020 Backend",
	Description: "REST API for TechHunt2020 Task - HR Employee Salary Management",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
